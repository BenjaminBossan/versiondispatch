* versiondispatch
** Goal
Make it easier to adopt your code to use different versions of a package. The API is similar to ~functools.singledispatch~
** Examples
*** Dispatching on a single package version
Decorate the main (default) function with ~versiondispatch~. Then, if you need specific behavior based on the version of a specific package, write that function and decorate it with ~.register(<version>)~ like shown below:

#+begin_src python
@versiondispatch
def foo():
    return "default behavior"

@foo.register("sklearn>1.2")
def _():
    return "new behavior"

@foo.register("sklearn<1.0")
def _():
    return "old behavior"


foo()  # output depends on installed scikit-learn version
#+end_src

At function definition time, the decorator will check the actual version of (in this case) ~sklearn~ and make the correspondingly decorated function the one that will actually be used.
*** Dispatching on multiple package versions
It is possible to dispatch on the versions of multiple packages:

#+begin_src python
@versiondispatch
def foo():
    return "default behavior"

@foo.register("sklearn<1.0")
def _():
    return "only sklearn is old"

@foo.register("numpy<1.0, sklearn<1.0")
def _():
    return "both numpy and sklearn are old"
#+end_src

If multiple conditions are matching, then the /last/ condition takes precendence. So in this case if both sklearn and numpy are below v1.0, we would get "both numpy and sklearn are old", and not "only sklearn is old", even though that matches too.

Depending on how you define the functions, the last condition is not necessarily the /most specific/ condition, so take care.
** Usage
There is no PyPI package for now. The best way to use this is to copy the contents of ~src.py~ into your own project and use it from there. The only dependency is ~packaging~.
* Development
** To help development, follow these steps:
*** clone and check out the repo
*** create a virtual environment with the tool of your choice
*** install development dependencies:
~python -m pip install -r requirements-dev.txt~
*** run the unit tests:
~pytest --cov --cov-report=term-missing test.py~
* TODOs
Under consideration to be implemented yet:
** Docstrings and docs
Need to be extended and improved.
** Optional warnings
It would be nice to have a feature to add a warning when a specific version is found, most notably for deprecations:

#+begin_src python
@versiondispatch
def foo():
  return "default behavior"

msg = "You are using an old sklearn version, which will not be supported after the next release"

@foo.register("sklearn<1.0", warning=DeprecationWarning(msg))
def _():
  return "old behavior"
#+end_src
** No external dependencies
Right now, there is a single external dependency, ~packaging~, which is used for version checks. Ideally, we can get rid of it.
** Special keys
*** Python
Allow checks for the Python version, e.g. ~@foo.register("Python<3.10")~
*** Operating system
Allow checking for the OS, e.g. ~@foo.register("os==darwin")~
*** Environment variables
It might be nice to be able to check env vars, even if only for exact equality, like ~@foo.register("$LANG==en_US.UTF-8")~
** Persistence
Check that the decorated function can be pickled. Also, if feasible, make it possible that if the function is unpickled, the dispatch is re-evaluated, since the version could have changed by then.
** More checks on indicated versions
It would be nice if version checks that don't make sense are caught at function definition time, like:

#+begin_src python
@versiondispatch
def foo():
  return "default behavior"

@foo.register("sklearn<1.0, sklearn>2.0")
def _():
  return "can never be reached"
#+end_src
** Coverage
If feasible (probably it's not), tell ~coverage~ which functions should be ignored for line coverage because they are meant for a different package version.
** General niceties
- distribute on PyPI
- set up CI
- tidy up the repo
